import smtplib
import vk_api
import json
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import re
import time
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("VK_TOKEN")
SMTP_EMAIL = os.getenv("SMTP_EMAIL")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
vk_session = vk_api.VkApi(token=TOKEN)
vk = vk_session.get_api()
longpoll = VkBotLongPoll(vk_session, 218569753)  # ID –≥—Ä—É–ø–ø—ã

# üîπ –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# üîπ –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(user_id, message):
    try:
        vk.messages.send(user_id=user_id, message=message, random_id=int(time.time() * 1000))
    except vk_api.exceptions.ApiError as e:
        print(f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def send_keyboard(user_id, message, buttons):
    keyboard = {
        "one_time": True,
        "buttons": [[{"action": {"type": "text", "label": btn}, "color": "primary"}] for btn in buttons]
    }
    vk.messages.send(user_id=user_id, message=message, random_id=int(time.time() * 1000),
                     keyboard=json.dumps(keyboard, ensure_ascii=False))

def remove_keyboard(user_id, message):
    keyboard = {"buttons": [], "one_time": True}
    vk.messages.send(user_id=user_id, message=message, random_id=int(time.time() * 1000), keyboard=json.dumps(keyboard))

def send_email(subject, body):
    try:
        msg = MIMEMultipart()
        msg["From"] = SMTP_EMAIL
        msg["To"] = ADMIN_EMAIL
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain"))

        server = smtplib.SMTP_SSL("smtp.yandex.ru", 465)
        server.login(SMTP_EMAIL, SMTP_PASSWORD)
        server.sendmail(SMTP_EMAIL, ADMIN_EMAIL, msg.as_string())
        server.quit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def process_message(user_id, message):
    if user_id not in user_data:
        user_data[user_id] = {}
        send_keyboard(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", ["–ü–∞—Ü–∏–µ–Ω—Ç 18+", "–†–æ–¥–∏—Ç–µ–ª—å", "–†–µ–±–µ–Ω–æ–∫"])
        return

    data = user_data[user_id]

    if "category" not in data:
        data["category"] = message
        remove_keyboard(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return

    if "fio" not in data:
        data["fio"] = message
        send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return

    if "phone" not in data:
        if re.match(r"^\+?\d{10,15}$", message):
            data["phone"] = message
            send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        else:
            send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    if "email" not in data:
        if re.match(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$", message):
            data["email"] = message
            if data["category"] == "–†–æ–¥–∏—Ç–µ–ª—å":
                send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞:")
            elif data["category"] == "–†–µ–±–µ–Ω–æ–∫":
                send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è:")
            else:
                send_keyboard(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞:", ["–¢–∏–ø 1", "–¢–∏–ø 2"])
        else:
            send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        return

    if data["category"] == "–†–æ–¥–∏—Ç–µ–ª—å" and "child_fio" not in data:
        data["child_fio"] = message
        send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return

    if data["category"] == "–†–æ–¥–∏—Ç–µ–ª—å" and "child_dob" not in data:
        if re.match(r"\d{2}.\d{2}.\d{4}", message):
            data["child_dob"] = message
            send_keyboard(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞ —É —Ä–µ–±–µ–Ω–∫–∞:", ["–¢–∏–ø 1", "–¢–∏–ø 2"])
        else:
            send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    if data["category"] == "–†–µ–±–µ–Ω–æ–∫" and "parent_fio" not in data:
        data["parent_fio"] = message
        send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è:")
        return

    if data["category"] == "–†–µ–±–µ–Ω–æ–∫" and "parent_phone" not in data:
        if re.match(r"^\+?\d{10,15}$", message):
            data["parent_phone"] = message
            send_keyboard(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞:", ["–¢–∏–ø 1", "–¢–∏–ø 2", "–î—Ä—É–≥–æ–π"])
        else:
            send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    if "diabetes" not in data:
        data["diabetes"] = message
        send_keyboard(user_id, "–ï—Å—Ç—å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å?", ["–î–∞", "–ù–µ—Ç", "–ü—Ä–æ—Ö–æ–∂—É –ú–°–≠"])
        return

    if "disability" not in data:
        data["disability"] = message
        send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:")
        return

    if "city" not in data:
        data["city"] = message
        send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏:")
        return

    if "clinic" not in data:
        data["clinic"] = message
        send_message(user_id, "–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è:")
        return

    if "request" not in data:
        data["request"] = message

        application_text = f"""
        üìÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
        üîπ –§–ò–û: {data["fio"]}
        üîπ –¢–µ–ª–µ—Ñ–æ–Ω: {data["phone"]}
        üîπ Email: {data["email"]}
        üîπ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data["category"]}
        üîπ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: {data.get("parent_fio", "-")}
        üîπ –¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è: {data.get("parent_phone", "-")}
        üîπ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞: {data.get("child_fio", "-")}
        üîπ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞: {data.get("child_dob", "-")}
        üîπ –¢–∏–ø –¥–∏–∞–±–µ—Ç–∞: {data.get("diabetes", "-")}
        üîπ –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {data["disability"]}
        üîπ –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {data["city"]}
        üîπ –ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞: {data["clinic"]}
        üîπ –°—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è: {data["request"]}
        """

        send_email("–ù–æ–≤–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∑–∞—è–≤–∫–∞", application_text)
        send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

        del user_data[user_id]

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW and event.from_user:
        process_message(event.message.peer_id, event.message.text.strip())